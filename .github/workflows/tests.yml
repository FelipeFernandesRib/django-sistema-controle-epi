name: Python Tests (reusable)

on:
  workflow_call:

jobs:
  tests:
    name: Lint + Pytest (MySQL)
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: controle_epi_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot --silent"
          --health-interval=5s
          --health-timeout=15s
          --health-retries=30

    env:
      DB_ENGINE: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: root
      DB_NAME: controle_epi_test
      DJANGO_DEBUG: 1
      DJANGO_SECRET_KEY: ci-secret
      DJANGO_ALLOWED_HOSTS: "*"
      TZ: America/Sao_Paulo
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff==0.6.0 black isort
          pip install pytest pytest-django pytest-cov

      - name: Install mysql-client
        run: |
          sudo apt-get update
          sudo apt-get install -y default-mysql-client

      - name: Wait for MySQL
        run: |
          for i in `seq 1 60`; do
            mysqladmin ping -h 127.0.0.1 -uroot -proot --silent && break
            echo "Aguardando MySQL..."
            sleep 2
          done

      - name: Lint (ruff)
        run: ruff check --output-format=github .

      - name: Format check (black)
        run: black --check .

      - name: Imports check (isort)
        run: isort --profile black --check-only .

      - name: Django migrate
        run: python manage.py migrate --noinput

      - name: Pytest (coverage xml + term-missing + html)
        run: |
          pytest \
            --cov=. \
            --cov-branch \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --cov-report=html

      - name: Upload HTML coverage artifact
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov/
          retention-days: 7

      - name: Upload coverage to Codecov
        if: ${{ github.event_name == 'push' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true
          verbose: true
